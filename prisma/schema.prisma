generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model completed_tasks_history {
  id           Int        @id @default(autoincrement())
  date_entry   DateTime?  @db.Date
  room_task_id Int?
  room_task    room_task? @relation(fields: [room_task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guests {
  id             Int           @id @default(autoincrement())
  id_guest       String?       @unique @db.VarChar(25)
  first_name     String?       @db.VarChar(45)
  first_lastname String?       @db.VarChar(45)
  middle_name    String?       @db.VarChar(45)
  email          String?       @db.VarChar(45)
  date_ofbirth   DateTime?     @db.Date
  phone_number   String?       @db.VarChar(20)
  number_persons Int?
  nationality    String?       @db.VarChar(40)
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?     @default(now()) @db.Timestamptz(6)
  reservation    reservation[]
}

model invoice {
  id             Int              @id @default(autoincrement())
  date_invoice   DateTime?        @db.Date
  total_amount   Float?
  status         String?          @db.VarChar(1)
  reservation_id Int?
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  reservation    reservation?     @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payment_detail payment_detail[]
}

model password_reset {
  id         Int       @id @default(autoincrement())
  email      String    @db.VarChar(255)
  reset_code Int
  expires_at DateTime  @db.Timestamp(6)
  used       Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  @@index([email], map: "idx_password_reset_email")
}

model payment_detail {
  id                Int             @id @default(autoincrement())
  notes             String?
  date_pay          DateTime?       @db.Date
  time              DateTime?       @db.Timestamptz(6)
  id_payment_method Int?
  invoice_id        Int?
  mount             Float?
  payment_method    payment_method? @relation(fields: [id_payment_method], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice           invoice?        @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payment_method {
  id             Int              @id @default(autoincrement())
  method_name    String?          @db.VarChar(45)
  payment_detail payment_detail[]
}

model refresh_tokens {
  id            Int       @id @default(autoincrement())
  refresh_token String?
  user_id       Int?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
}

model reservation {
  id                Int                 @id @default(autoincrement())
  date_reserve      DateTime?           @default(dbgenerated("CURRENT_DATE")) @db.Date
  date_checkin      DateTime?           @default(dbgenerated("CURRENT_DATE")) @db.Date
  date_checkout     DateTime?           @default(dbgenerated("CURRENT_DATE")) @db.Date
  number_nights     Int?
  guests_id_guest   String?             @db.VarChar(25)
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @default(now()) @db.Timestamptz(6)
  rooms             Int[]
  invoice           invoice[]
  guests            guests?             @relation(fields: [guests_id_guest], references: [id_guest], onDelete: Cascade, map: "guests_id_guest_fkey")
  reservation_rooms reservation_rooms[]
}

model reservation_rooms {
  id             Int          @id @default(autoincrement())
  reservation_id Int?
  room_id        Int?
  reservation    reservation? @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rooms          rooms?       @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model rol_staff {
  id            Int     @id @default(autoincrement())
  rol_staffname String? @db.VarChar(45)
  staff         staff[]
}

model roles {
  id       Int     @id @default(autoincrement())
  rol_name String? @db.VarChar(45)
  users    users[]
}

model room_equipment {
  id                      Int                       @id @default(autoincrement())
  equipment_name          String?                   @db.VarChar(45)
  room_specific_equipment room_specific_equipment[]
}

model room_specific_equipment {
  id             Int             @id @default(autoincrement())
  room_id        Int?
  equipment_id   Int?
  room_equipment room_equipment? @relation(fields: [equipment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rooms          rooms?          @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model room_task {
  id                      Int                       @id @default(autoincrement())
  task_description        String?
  date_task               DateTime?                 @db.Date
  staff_id                Int?
  room_id                 Int?
  completed_tasks_history completed_tasks_history[]
  rooms                   rooms?                    @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  staff                   staff?                    @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_id")
}

model room_type {
  id          Int     @id @default(autoincrement())
  type        String? @db.VarChar(45)
  capacity    Int?
  price       Float?
  type_bed    String? @db.VarChar(20)
  size        Float?
  hotel_floor String? @db.VarChar(2)
  rooms       rooms[]
}

model rooms {
  id                      Int                       @id @default(autoincrement())
  status                  String?                   @db.VarChar(1)
  room_type_id            Int?
  reservation_rooms       reservation_rooms[]
  room_specific_equipment room_specific_equipment[]
  room_task               room_task[]
  room_type               room_type?                @relation(fields: [room_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model staff {
  id             Int         @id @default(autoincrement())
  id_staff       String?     @unique @db.VarChar(12)
  name_staff     String?     @db.VarChar(45)
  lastname_staff String?     @db.VarChar(45)
  email_staff    String?     @db.VarChar(45)
  phone          String?     @db.VarChar(20)
  rol_id         Int?
  created_at     DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?   @default(now()) @db.Timestamptz(6)
  gen            String?     @db.VarChar(1)
  room_task      room_task[]
  rol_staff      rol_staff?  @relation(fields: [rol_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users[]
}

model staff_schedule {
  id          Int       @id @default(autoincrement())
  staff_id    Int?
  days_week   String?
  start_time  DateTime? @db.Time(6)
  end_time    DateTime? @db.Time(6)
  shift_type  String?   @db.VarChar(20)
  notes       String?
}


model users {
  id         Int       @id @default(autoincrement())
  password   String?   @db.VarChar(100)
  role_id    Int?
  staff_id   Int?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  roles      roles?    @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff      staff?    @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
